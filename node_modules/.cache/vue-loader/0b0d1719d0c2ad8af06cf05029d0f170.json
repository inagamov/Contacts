{"remainingRequest":"/var/www/html/contacts/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/contacts/src/views/Contact.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/contacts/src/views/Contact.vue","mtime":1599825649793},{"path":"/var/www/html/contacts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/contacts/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Contact.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Contact.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <preloader/>\n\n        <!-- Background to close any window -->\n        <div class=\"modal-window-back\" v-if=\"editWindowIsOpened || fieldToRemove || confirmCancellationOfEditingField\" @click=\"editWindowIsOpened != null ? closeEditingFieldWindow() : closeConfirmationWindow()\"></div>\n\n        <div class=\"section\">\n            <!-- Back to the contacts -->\n            <router-link to=\"/\">\n                <div title=\"Back\" class=\"back-button\"><img v-lazyload :data-src=\"url.back\" alt=\"Back\"></div>\n            </router-link>\n\n            <!-- Undo the last action -->\n            <div title=\"Undo\" class=\"undo-button\" @click=\"undoLastAction\"><img v-lazyload :data-src=\"url.undo\" alt=\"Undo\"></div>\n\n            <!-- Basic contact info -->\n            <vue-initials-img :name=\"contact.name\" :title=\"contact.name\" class=\"contact-initials-big\"/>\n            <input type=\"text\" v-model=\"contact.name\" @input=\"updateContactName\" class=\"contact-info-input contact-name-input\">\n\n            <!-- Add additional info -->\n            <div class=\"additional-info-add\" @click=\"addNewField\">Add new field</div>\n\n            <!-- Message if user has no additional info fields -->\n            <p v-if=\"!fields[0]\" class=\"text-align-center padding-top-50\">You didn't add any additional info yet.</p>\n\n            <!-- Additional info -->\n            <div v-for=\"(field, index) in fields\" :key=\"field.id\" class=\"additional-info\">\n                <div style=\"width: 100%\">\n                    <p class=\"additional-info-text\"><span>{{ field.key }}: </span>{{ field.value }}</p>\n                </div>\n\n                <!-- <button class=\"additional-info-red margin-right-15\">Cancel</button> -->\n                <button class=\"additional-info-blue margin-right-15\" @click=\"openEditWindow(field, index)\">Edit</button>\n                <button @click=\"openConfirmationWindow(field, index)\" class=\"additional-info-red\">Delete</button>\n            </div>\n\n            <!-- Edit field window -->\n            <div class=\"modal-window\" v-if=\"editWindowIsOpened\" @keyup.enter=\"updateField(backupedField.index)\">\n                <div class=\"flex\">\n                    <input type=\"text\" placeholder=\"Age\" class=\"additional-info-input\" v-model=\"updatedField.key\">\n                    <input type=\"text\" placeholder=\"16\" class=\"additional-info-input\" v-model=\"updatedField.value\">\n                </div>\n\n                <div>\n                    <div @click=\"openConfirmationWindowToCancelEditingTheField\">Cancel</div>\n                    <p v-if=\"updatedField.key == '' || updatedField.value == ''\" class=\"color-red\" style=\"padding-top: 6px\">Inputs can't be empty.</p>\n                    <div @click=\"updateField(backupedField.index)\">Save</div>\n                </div>\n            </div>\n\n            <!-- Confirmation window - cancel editing the field -->\n            <div class=\"modal-window\" v-if=\"confirmCancellationOfEditingField\" @keyup.enter=\"closeConfirmationWindow(); closeEditingFieldWindow()\">\n                <p>Are you sure you want to cancel the changes?</p>\n                <div>\n                    <div @click=\"closeConfirmationWindow\">No</div>\n                    <div @click=\"closeConfirmationWindow(); closeEditingFieldWindow()\">Yes</div>\n                </div>\n            </div>\n\n            <!-- Confirmation window - remove field -->\n            <div class=\"modal-window\" v-if=\"fieldToRemove\" @keyup.enter=\"removeField\">\n                <p>Are you sure you want to remove field <span>{{ fieldToRemove.key == '' ? 'empty' : fieldToRemove.key }}</span> with the value of <span>{{ fieldToRemove.value == '' ? 'empty' : fieldToRemove.value }}</span>?</p>\n                <div>\n                    <div @click=\"closeConfirmationWindow\">Cancel</div>\n                    <div @click=\"removeField\">Remove</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Vue from 'vue'\n\n// Components\nimport preloader from '@/components/preloader'\n\n// Contact photo - initials\nimport VueInitialsImg from 'vue-initials-img'\nVue.use(VueInitialsImg);\n\n// Utils\nimport lazyload from '@/components/utils/lazyload'\n\nexport default {\n    name: 'Contacts',\n    components: {\n        preloader,\n    },\n\n    props: {\n        preloader: { type: Object, default: () => ({}) }\n    },\n\n    data: () => ({\n        // Images\n        url: {\n            add: require('../assets/img/add.png'),\n            remove: require('../assets/img/remove.png'),\n            back: require('../assets/img/down-arrow.png'),\n            undo: require('../assets/img/undo.png'),\n        },\n\n        // Related to contact\n        contacts: null,\n        contact: null,\n\n        // Additional contact info\n        fields: [],\n        fieldToRemove: null,\n        updatedField: {\n            key: '',\n            value: ''\n        },\n\n        // Backup\n        backupedField: null,\n\n        // Edit window\n        editWindowIsOpened: false,\n        confirmCancellationOfEditingField: false,\n    }),\n\n    methods: {\n        getFields () {\n            // Clear previous fields\n            this.fields = [];\n\n            // Check for additional info - fields\n            if (Object.keys(this.contact).length > 2) {\n                // Loop all keys and push them to the fields array\n                for (const [key, value] of Object.entries(this.contact)) {\n                    // If field key and value are filled\n                    if (key != '' && value != '' && key != 'id' && key != 'name') {\n                        // Push additional information field\n                        this.fields.push({\n                            key: key,\n                            value: value,\n                        });\n                    \n                    // If key or value (or key and value at the same time) of the field is (are) empty\n                    // If key this is the default key (like 'id' or 'name')\n                    } else {\n                        delete this.contact.key;\n                    }\n                }\n            }\n        },\n\n        addNewField () {\n            // Create new info about contact\n            this.fields.push({\n                key: '',\n                value: '',\n            });\n        },\n\n        openConfirmationWindow (field, index) {\n            // Set field info to remove\n            field.index = index;\n\n            // Open confirmation window\n            this.fieldToRemove = field;\n        },\n\n        closeConfirmationWindow () {\n            // Close confirmation windows\n            this.fieldToRemove = null;\n\n            // Open window to confirm the cancellation of editing the field\n            this.confirmCancellationOfEditingField = false;\n        },\n\n        removeField () {\n            // Removing field from the view\n            this.fields.splice(this.fieldToRemove.index, 1);\n\n            if (this.contact.hasOwnProperty(this.fieldToRemove.key)) {\n                // Removing field locally\n                var key = this.fieldToRemove.key;\n                delete this.contact[key];\n\n                // Find the contact in a contacts list\n                for (var i = 0; i < this.contacts.length; i++) {\n                    if (this.contacts[i].id == this.contact.id) {\n                        // Replace old contact info with the new one\n                        this.contacts[i] = this.contact;\n\n                        // Update the data in local storage\n                        localStorage.contacts = JSON.stringify(this.contacts);\n                    }\n                }\n            }\n\n            // Close confirmation window\n            this.closeConfirmationWindow();\n        },\n\n        openEditWindow (field, index) {\n            // Open edit field window\n            this.editWindowIsOpened = true;\n\n            // Backup the field\n            this.backupedField = field;\n            this.backupedField.index = index;\n\n            // Get default field data & repeat it for furute updates\n            this.updatedField.key = field.key;\n            this.updatedField.value = field.value;\n        },\n\n        closeEditingFieldWindow () {\n            // Close edit field window\n            this.editWindowIsOpened = false;\n\n            // Clear data for updated fields\n            this.updatedField = {\n                key: '',\n                value: ''\n            };\n        },\n\n        updateField (index) {\n            // Find the field\n            for (var i = 0; i < this.fields.length; i++) {\n                if (this.fields.indexOf(this.fields[i]) === index) {\n                    // Check for emptiness of the field\n                    if (this.updatedField.key != '' && this.updatedField.value != '') {\n                        // Check if it's the new field\n                        if (this.backupedField.key == '') {\n                            // Create the new prop.\n                            this.contact[this.updatedField.key] = this.updatedField.value;\n\n                    } else {\n                            // The clone (for obj) function\n                            const clone = (obj) => Object.assign({}, obj);\n\n                            // Function to swap old key with the new one\n                            const renameKey = (object, key, newKey) => {\n                                const clonedObj = clone(object);\n                                const targetKey = clonedObj[key];\n\n                                delete clonedObj[key];\n                                clonedObj[newKey] = targetKey;\n\n                                delete this.contact[this.backupedField.key];\n\n                                return clonedObj;\n                            };\n\n                            // Set new key. for the field\n                            renameKey(this.contact, this.backupedField.key, this.updatedField.key);\n\n                            // Set new value. for the field\n                            this.contact[this.updatedField.key] = this.updatedField.value;\n                        }\n\n                        // Find the contact in a contacts list\n                        for (var i = 0; i < this.contacts.length; i++) {\n                            if (this.contacts[i].id == this.contact.id) {\n                                // Replace old contact info with the new one\n                                this.contacts[i] = this.contact;\n\n                                // Update the data in local storage\n                                localStorage.contacts = JSON.stringify(this.contacts);\n\n                                // Close the edit field window\n                                this.closeEditingFieldWindow();\n                            }\n                        }\n\n                        // Refresh additional info about the contact\n                        this.getFields();\n                    }\n                }\n            }\n        },\n\n        openConfirmationWindowToCancelEditingTheField () {\n            // Open window to confirm the cancellation of editing the field\n            this.confirmCancellationOfEditingField = true;\n        },\n\n        updateContactName () {\n            // Find the contact in a contacts list\n            for (var i = 0; i < this.contacts.length; i++) {\n                if (this.contacts[i].id == this.contact.id) {\n                    if (this.contact.name != '') {\n                        // Update the data in local storage\n                        localStorage.contacts = JSON.stringify(this.contacts);\n                    }\n                }\n            }\n        },\n        \n        undoLastAction () {\n            // Find the field\n            for (var i = 0; i < this.fields.length; i++) {\n                if (this.fields.indexOf(this.fields[i]) === this.backupedField.index) {\n                    // The clone (for obj) function\n                    const clone = (obj) => Object.assign({}, obj);\n\n                    // Function to swap old key with the new one\n                    const renameKey = (object, key, newKey) => {\n                        const clonedObj = clone(object);\n                        const targetKey = clonedObj[key];\n\n                        delete clonedObj[key];\n                        clonedObj[newKey] = targetKey;\n\n                        delete this.contact[this.fields[i].key];\n\n                        return clonedObj;\n                    };\n\n                    // Restore old key for the field\n                    renameKey(this.contact, this.fields[i].key, this.backupedField.key);\n\n                    // Restore old value for the field\n                    this.contact[this.fields[i].key] = this.backupedField.value;\n\n                    // Find the contact in a contacts list\n                    for (var i = 0; i < this.contacts.length; i++) {\n                        if (this.contacts[i].id == this.contact.id) {\n                            // Replace old contact info with the new one\n                            this.contacts[i] = this.contact;\n\n                            // Update the data in local storage\n                            localStorage.contacts = JSON.stringify(this.contacts);\n                        }\n                    }\n\n                    // Refresh additional info about the contact\n                    this.getFields();\n                }\n            }\n        }\n    },\n\n    created () {\n        // Load all contacts from the local storage\n        if (localStorage.contacts) {\n            this.contacts = JSON.parse(localStorage.contacts);\n        }\n\n        // Find the contact in a contacts list\n        for (var i = 0; i < this.contacts.length; i++) {\n            if (this.contacts[i].id == this.$route.params.id) {\n                // Saving contact info\n                this.contact = this.contacts[i];\n\n                // Get additional info about the contact\n                this.getFields();\n\n                return;\n            }\n        }\n\n        // If there is no contact user is looking for \n        this.$router.push('../notFound');\n    },\n\n    directives: {\n        lazyload\n    }\n}\n</script>\n\n<style scoped>\n    @import '../assets/css/styles.css';\n</style>"]}]}